{"version":3,"sources":["RIV.js","serviceWorker.js","index.js"],"names":["RIV","props","renderMyData","lim","afterStart","setState","visible","url","URL","state","subR","fetch","then","response","json","responseJson","tmpArray","rJ","data","children","i","length","urlStr","JSON","stringify","endsWith","push","sigPic","after","_callRender","concat","catch","error","handleInputChange","event","target","value","name","_handleCommon","_handleKeyDown","e","key","preventDefault","_newSearch","numOfImg","_newEmptySearch","Navbar","bg","expand","sticky","Brand","href","onClick","this","Form","inline","FormControl","onChange","onKeyDown","type","placeholder","className","Button","variant","Alert","Container","fluid","Row","map","item","Col","md","Card","Img","src","size","block","ListGroup","Item","action","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.92e46af2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./RIV.css\";\n\n/*  Bootstrap */\n\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Alert from \"react-bootstrap/Alert\";\n\nexport default class RIV extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: null,\n      subR: \"\",\n      numOfImg: 5,\n      afterStart: null,\n      sigPic: 0,\n      visible: false,\n    };\n  }\n\n  renderMyData = (lim, afterStart) => {\n    this.setState({ visible: false });\n    var url = new URL(\n      `https://www.reddit.com/r/${this.state.subR}/.json?limit=${lim}&after=${afterStart}`\n    );\n    fetch(url)\n      .then((response) => response.json())\n      .then((responseJson) => {\n        let tmpArray = [];\n        let rJ = responseJson.data.children;\n        for (var i = 0; i < rJ.length; i++) {\n          const urlStr = JSON.stringify(rJ[i].data.url);\n          if (\n            urlStr.endsWith('.jpg\"') ||\n            urlStr.endsWith('.png\"') ||\n            urlStr.endsWith('.jpeg\"') ||\n            urlStr.endsWith('.gif\"')\n          ) {\n            tmpArray.push(rJ[i].data.url);\n          }\n        }\n        if (tmpArray.length === 0) {\n          if (this.state.sigPic > 5) {\n            this.setState({ visible: true });\n          } else {\n            this.setState(\n              {\n                sigPic: this.state.sigPic + 1,\n                afterStart: responseJson.data.after,\n              },\n              () => this._callRender()\n            );\n          }\n        } else {\n          this.setState({\n            data: this.state.data ? this.state.data.concat(tmpArray) : tmpArray,\n            afterStart: responseJson.data.after,\n          });\n        }\n      })\n      .catch((error) => {\n        this.setState({ visible: true });\n      });\n  };\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  _handleCommon = (event) => {\n    const target = event.target;\n    const name = target.name;\n\n    this.setState({ subR: name }, () => this._callRender());\n  };\n\n  _handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      this._newSearch();\n    }\n  };\n\n  _callRender = () => {\n    this.renderMyData(this.state.numOfImg, this.state.afterStart);\n  };\n\n  _newSearch = () => {\n    this.setState(\n      { data: null, numOfImg: 5, afterStart: null, sigPic: 0 },\n      () => this._callRender()\n    );\n  };\n\n  _newEmptySearch = () => {\n    this.setState({ data: null, numOfImg: 5, afterStart: null, sigPic: 0 });\n  };\n\n  render() {\n    const miscItems = [\n      \"pics\",\n      \"funny\",\n      \"aww\",\n      \"OldSchoolCool\",\n      \"memes\",\n      \"AdviceAnimals\",\n      \"wholesomememes\",\n      \"TheWayWeWere\",\n    ];\n    const artItems = [\n      \"Art\",\n      \"UnusualArt\",\n      \"Illustration\",\n      \"Museum\",\n      \"Calligraphy\",\n      \"StreetArt\",\n      \"Watercolor\",\n    ];\n    const natItems = [\n      \"NatureIsFuckingLit\",\n      \"marijuanaenthusiasts\",\n      \"EarthPorn\",\n      \"Outdoors\",\n      \"gardening\",\n    ];\n    const aniItems = [\n      \"birdpics\",\n      \"TinyUnits\",\n      \"OceanCreatures\",\n      \"AnimalPorn\",\n      \"NatureIsBrutal\",\n      \"WildlifePhotos\",\n    ];\n    const tecItems = [\"ProgrammerHumor\", \"homelab\"];\n    const phoItems = [\n      \"wildlifephotography\",\n      \"photocritique\",\n      \"itookapicture\",\n      \"photographs\",\n    ];\n    return (\n      <div>\n        <Navbar bg=\"light\" expand=\"lg\" sticky=\"top\">\n          <Navbar.Brand href=\"/\" onClick={this._newEmptySearch}>\n            Home\n          </Navbar.Brand>\n          <Form inline>\n            <FormControl\n              name=\"subR\"\n              onChange={this.handleInputChange}\n              onKeyDown={this._handleKeyDown}\n              type=\"text\"\n              placeholder=\"Search Subreddit\"\n              className=\"mr-sm-2\"\n            />\n            <Button onClick={this._newSearch} variant=\"success\">\n              Search\n            </Button>\n          </Form>\n        </Navbar>\n        {this.state.visible ? (\n          <Alert variant=\"danger\">\n            No other significant image(s) exist in this subreddit. Please browse\n            another subreddit.\n          </Alert>\n        ) : null}\n        <Container fluid>\n          {this.state.data ? (\n            <Row>\n              {this.state.data.map((item, i) => (\n                <Col md={4} key={i}>\n                  <Card.Img className=\"imageDisplay\" src={item} />\n                </Col>\n              ))}\n              <Col md={12}>\n                <Button\n                  variant=\"primary\"\n                  size=\"lg\"\n                  block\n                  onClick={this._callRender}\n                >\n                  Load More\n                </Button>\n              </Col>\n            </Row>\n          ) : (\n            <div>\n              <div className=\"commonSubTitle\">Common Subreddits</div>\n              <Row className=\"listOfSubRs\">\n                <Col md={2}>\n                  <ListGroup className=\"subRedListTopic\">\n                    <ListGroup.Item>Miscellaneous</ListGroup.Item>\n                    {miscItems.map((item, i) => (\n                      <ListGroup.Item\n                        action\n                        variant=\"light\"\n                        className=\"topics\"\n                        name={item}\n                        key={i}\n                        onClick={this._handleCommon}\n                      >\n                        /r/{item}\n                      </ListGroup.Item>\n                    ))}\n                  </ListGroup>\n                </Col>\n                <Col md={2}>\n                  <ListGroup>\n                    <ListGroup.Item className=\"subRedListTopic\">\n                      Artistic\n                    </ListGroup.Item>\n                    {artItems.map((item, i) => (\n                      <ListGroup.Item\n                        action\n                        variant=\"light\"\n                        className=\"topics\"\n                        name={item}\n                        key={i}\n                        onClick={this._handleCommon}\n                      >\n                        /r/{item}\n                      </ListGroup.Item>\n                    ))}\n                  </ListGroup>\n                </Col>\n                <Col md={2}>\n                  <ListGroup>\n                    <ListGroup.Item className=\"subRedListTopic\">\n                      Natural\n                    </ListGroup.Item>\n                    {natItems.map((item, i) => (\n                      <ListGroup.Item\n                        action\n                        variant=\"light\"\n                        className=\"topics\"\n                        name={item}\n                        key={i}\n                        onClick={this._handleCommon}\n                      >\n                        /r/{item}\n                      </ListGroup.Item>\n                    ))}\n                  </ListGroup>\n                </Col>\n                <Col md={2}>\n                  <ListGroup>\n                    <ListGroup.Item className=\"subRedListTopic\">\n                      Animals\n                    </ListGroup.Item>\n                    {aniItems.map((item, i) => (\n                      <ListGroup.Item\n                        action\n                        variant=\"light\"\n                        className=\"topics\"\n                        name={item}\n                        key={i}\n                        onClick={this._handleCommon}\n                      >\n                        /r/{item}\n                      </ListGroup.Item>\n                    ))}\n                  </ListGroup>\n                </Col>\n                <Col md={2}>\n                  <ListGroup>\n                    <ListGroup.Item className=\"subRedListTopic\">\n                      Technology\n                    </ListGroup.Item>\n                    {tecItems.map((item, i) => (\n                      <ListGroup.Item\n                        action\n                        variant=\"light\"\n                        className=\"topics\"\n                        name={item}\n                        key={i}\n                        onClick={this._handleCommon}\n                      >\n                        /r/{item}\n                      </ListGroup.Item>\n                    ))}\n                  </ListGroup>\n                </Col>\n                <Col md={2}>\n                  <ListGroup>\n                    <ListGroup.Item className=\"subRedListTopic\">\n                      Photography\n                    </ListGroup.Item>\n                    {phoItems.map((item, i) => (\n                      <ListGroup.Item\n                        action\n                        variant=\"light\"\n                        className=\"topics\"\n                        name={item}\n                        key={i}\n                        onClick={this._handleCommon}\n                      >\n                        /r/{item}\n                      </ListGroup.Item>\n                    ))}\n                  </ListGroup>\n                </Col>\n              </Row>\n            </div>\n          )}\n        </Container>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport RIV from \"./RIV\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RIV />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}