{"version":3,"sources":["RIV.js","serviceWorker.js","index.js"],"names":["RIV","props","renderMyData","lim","url","URL","state","subR","params","limit","Object","keys","forEach","key","searchParams","append","fetch","then","response","json","responseJson","tmpArray","rJ","data","children","i","length","push","setState","nextPic","catch","error","console","handleInputChange","event","target","value","name","handlePicChange","addV","Navbar","bg","expand","Brand","href","Form","inline","FormControl","type","placeholder","className","Button","variant","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4SAUqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAaRC,aAAe,SAACC,GACd,IAAIC,EAAM,IAAIC,IAAJ,mCAAoC,EAAKC,MAAMC,KAA/C,WACRC,EAAS,CAAEC,MAAON,GACpBO,OAAOC,KAAKH,GAAQI,SAAQ,SAACC,GAAD,OAC1BT,EAAIU,aAAaC,OAAOF,EAAKL,EAAOK,OAEtCG,MAAMZ,GACHa,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAGL,IAFA,IAAIC,EAAW,GACXC,EAAKF,EAAaG,KAAKC,SAClBC,EAAI,EAAGA,EAAIH,EAAGI,OAAQD,IAC7BJ,EAASM,KAAKL,EAAGG,GAAGF,KAAKnB,KAG3B,EAAKwB,SAAS,CAAEL,KAAMF,EAAUQ,QAAS,OAE1CC,OAAM,SAACC,GACNC,QAAQD,MAAMA,OAhCD,EAoCnBE,kBAAoB,SAACC,GACnB,IAAMC,EAASD,EAAMC,OACfC,EAAQD,EAAOC,MACfC,EAAOF,EAAOE,KAEpB,EAAKT,SAAL,eACGS,EAAOD,KA1CO,EA+CnBE,gBAAkB,SAACC,GACjB,EAAKX,SAAS,CACZC,QAAS,EAAKvB,MAAMuB,QAAUU,KA9ChC,EAAKjC,MAAQ,CACXiB,KAAM,KACNhB,KAAM,GACNsB,QAAS,GANM,E,qDAsDjB,OAgCE,kBAACW,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,QACA,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASC,UAAU,YACxD,kBAACC,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,gB,GA3FuBC,aCEbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdtC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsC,c","file":"static/js/main.88e52a88.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./RIV.css\";\n\n/*  Bootstrap */\n\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\n\nexport default class RIV extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: null,\n      subR: \"\",\n      nextPic: 0,\n    };\n  }\n\n  // componentDidMount() {\n  //   this.renderMyData();\n  // }\n\n  renderMyData = (lim) => {\n    var url = new URL(`https://www.reddit.com/r/${this.state.subR}/.json`),\n      params = { limit: lim };\n    Object.keys(params).forEach((key) =>\n      url.searchParams.append(key, params[key])\n    );\n    fetch(url)\n      .then((response) => response.json())\n      .then((responseJson) => {\n        let tmpArray = [];\n        let rJ = responseJson.data.children;\n        for (var i = 0; i < rJ.length; i++) {\n          tmpArray.push(rJ[i].data.url);\n        }\n        //DELETE NEXTPIC, FOR TESTING PURPOSES ONLY\n        this.setState({ data: tmpArray, nextPic: 0 });\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  //Change index of array containing pictures so the next or the previous image is accessed, via adding/subtracting 1\n  handlePicChange = (addV) => {\n    this.setState({\n      nextPic: this.state.nextPic + addV,\n    });\n  };\n\n  render() {\n    return (\n      // <div className=\"wrapper\">\n      //   <span className=\"topNav\" onClick={() => this.renderMyData(100)}>\n      //     Search\n      //   </span>\n      //   <input\n      //     className=\"topNav\"\n      //     type=\"text\"\n      //     name=\"subR\"\n      //     onChange={this.handleInputChange}\n      //   />\n\n      //   {this.state.data ? (\n      //     <div className=\"container\">\n      //       <img\n      //         className=\"img-fluid\"\n      //         src={this.state.data[this.state.nextPic]}\n      //         alt=\"\"\n      //       />\n      //     </div>\n      //   ) : (\n      //     <div>LOAD</div>\n      //   )}\n      //   <div className=\"botNavCont\">\n      //     <span className=\"botNav\" onClick={() => this.handlePicChange(-1)}>\n      //       Previous\n      //     </span>\n      //     <span className=\"botNav\" onClick={() => this.handlePicChange(1)}>\n      //       Next\n      //     </span>\n      //   </div>\n      // </div>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">Home</Navbar.Brand>\n        <Form inline>\n          <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n          <Button variant=\"outline-success\">Search</Button>\n        </Form>\n      </Navbar>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport RIV from \"./RIV\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RIV />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}